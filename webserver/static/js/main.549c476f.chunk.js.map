{"version":3,"sources":["components/GoogleMap.tsx","components/EndpointSummary.tsx","components/DomainSummary.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Map","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","endpoints","map","endpoint","i","key","position","location","latitute","longtitude","onDblClick","PubSub","publish","IP","GoogMap","this","loadingElement","style","height","containerElement","mapElement","React","Component","EndpointSummary","title","width","Item","label","type","onClick","domain","country","city","org","dataSource","openPorts","Column","dataIndex","DomainSummary","domainInfo","name","Header","Layout","Content","Footer","Sider","App","Input","Search","state","currentItem","currentItemType","domainList","orgList","ipList","isLoading","onSearch","bind","onChooseEndpoint","onChooseDomain","onChooseOrg","subscribe","setState","fetch","then","resp","a","json","msg","getOrganizationInfo","orgInfo","getDomainInfo","ip","getEndpointInfo","endpointInfo","jsonResp","console","log","orgname","value","test","indexOf","currentView","justify","align","margin","searchOptions","push","span","color","href","options","onSelect","filterOption","size","placeholder","enterButton","backgroundColor","minHeight","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.549c476f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\r\nimport PubSub from 'pubsub-js'\r\nimport {Endpoint} from \"../Structs\";\r\n\r\nexport const Map = withGoogleMap((props: any) =>\r\n    <GoogleMap defaultZoom={2} defaultCenter={{lat: 10.0, lng: 10.0}}>\r\n        {\r\n            props.endpoints.map((endpoint: Endpoint, i: number) => {\r\n                return <Marker key={i}\r\n                               position={{ lat: endpoint.location.latitute, lng: endpoint.location.longtitude }}\r\n                               onDblClick={() => {\r\n                                   PubSub.publish(\"chooseEndpoint\", endpoint.IP);\r\n                               }}\r\n                />\r\n            })\r\n        }\r\n    </GoogleMap>\r\n)\r\n\r\n\r\nexport interface GoogMapProps {\r\n    endpoints: Endpoint[]\r\n}\r\n\r\nexport default class GoogMap extends React.Component<GoogMapProps> {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Map endpoints={this.props.endpoints}\r\n                    loadingElement={<div style={{ height: `100%` }} />}\r\n                    containerElement={<div style={{ height: `400px` }} />}\r\n                    mapElement={<div style={{ height: `100%` }} />}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {Endpoint, Port} from \"../Structs\";\r\nimport GoogMap from \"./GoogleMap\";\r\nimport {Button, Descriptions, Divider, List} from \"antd\";\r\nimport { Card, Table } from 'antd';\r\nimport Column from \"antd/es/table/Column\";\r\nimport PubSub from \"pubsub-js\";\r\n\r\n\r\n\r\nexport interface EndpointSummary {\r\n    endpoint:   Endpoint\r\n}\r\n\r\nexport class EndpointSummary extends React.Component<any, EndpointSummary> {\r\n    render() {\r\n        const {endpoint} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h1>IP Address: {endpoint.IP}</h1>\r\n                <div>\r\n                    <Card title={\"Information\"} style={{width: 1200}}>\r\n                        <Descriptions>\r\n                            <Descriptions.Item label={\"Domain\"}>\r\n                                <Button type={\"link\"} onClick={() => PubSub.publish(\"chooseDomain\", endpoint.domain)}>{endpoint.domain}</Button>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label={\"Country\"}> {endpoint.location.country}</Descriptions.Item>\r\n                            <Descriptions.Item label={\"City\"}> {endpoint.location.city}</Descriptions.Item>\r\n                            <Descriptions.Item label={\"Organization\"}>\r\n                                <Button type={\"link\"} onClick={() => PubSub.publish(\"chooseOrganization\", endpoint.org)}>{endpoint.org}</Button>\r\n                            </Descriptions.Item>\r\n\r\n                        </Descriptions>\r\n                    </Card>\r\n                    <GoogMap endpoints={[endpoint]}/>\r\n                </div>\r\n\r\n                <Divider/>\r\n                <div>\r\n                    <h3>Open ports: </h3>\r\n                    <Table dataSource={endpoint.openPorts}>\r\n                        <Column title={\"Number\"} key={\"number\"} dataIndex={\"number\"}/>\r\n                        <Column title={\"Type\"} key={\"type\"} dataIndex={\"type\"}/>\r\n                        <Column title={\"Service\"} key={\"serviceName\"} dataIndex={\"serviceName\"}/>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {Endpoint, Port} from \"../Structs\";\r\nimport GoogMap from \"./GoogleMap\";\r\nimport {Button, Descriptions, Divider, List} from \"antd\";\r\nimport { Card, Table } from 'antd';\r\nimport Column from \"antd/es/table/Column\";\r\nimport PubSub from 'pubsub-js'\r\n\r\n\r\nexport interface DomainInfo {\r\n    name:       string\r\n    endpoints:  Endpoint[]\r\n}\r\n\r\nexport interface DomainSummaryProps {\r\n    domainInfo  : DomainInfo\r\n}\r\n\r\nexport class DomainSummary extends React.Component<any, DomainSummaryProps> {\r\n    render() {\r\n        const {domainInfo} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Domain: {domainInfo.name}</h1>\r\n                <div>\r\n                    <GoogMap endpoints={domainInfo.endpoints}/>\r\n                </div>\r\n\r\n                <Divider/>\r\n                <div>\r\n                {/*    List of endpoints here*/}\r\n                <List>\r\n                    <h1>IP Addresses: </h1>\r\n                    {\r\n                        domainInfo.endpoints.map((endpoint: Endpoint) => {\r\n                            return (<List.Item key={endpoint.IP}>\r\n                                <Button type={\"link\"} onClick={() => PubSub.publish(\"chooseEndpoint\", endpoint.IP)}>{endpoint.IP}</Button>\r\n                            </List.Item>)\r\n                        })\r\n                    }\r\n                </List>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Layout, Input, Row, Col} from 'antd';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { AutoComplete } from \"antd\";\nimport {EndpointSummary} from \"./components/EndpointSummary\";\nimport {DomainSummary} from \"./components/DomainSummary\";\nimport {Endpoint} from \"./Structs\";\nimport PubSub from 'pubsub-js'\n\nconst {Header, Footer, Sider, Content } = Layout;\nconst {Search}  = Input;\n\nclass App extends React.Component {\n\n    state = {\n        currentItem:        null,\n        currentItemType:    null,\n        domainList:         [],\n        orgList:            [],\n        ipList:             [],\n        isLoading:          false\n    }\n\n    constructor(props: any) {\n        super(props)\n\n        this.onSearch = this.onSearch.bind(this)\n        this.onChooseEndpoint = this.onChooseEndpoint.bind(this)\n        this.onChooseDomain = this.onChooseDomain.bind(this)\n        this.onChooseOrg = this.onChooseOrg.bind(this)\n        PubSub.subscribe('chooseEndpoint', this.onChooseEndpoint);\n        PubSub.subscribe('chooseDomain', this.onChooseDomain);\n        PubSub.subscribe('chooseOrganization', this.onChooseOrg);\n    }\n\n    componentDidMount() {\n        // Load domain list from DB\n\n        this.setState({isLoading: true});\n        fetch('/getDomainList')\n            .then(async (resp) => {\n                let domainList = await resp.json();\n                this.setState({domainList: domainList})\n            })\n\n        fetch('/getOrgList')\n            .then(async (resp) => {\n                let orgList = await resp.json();\n                this.setState({orgList: orgList})\n            })\n\n        fetch('/getIPList')\n            .then(async (resp) => {\n                let ipList = await resp.json();\n                this.setState({ipList: ipList, isLoading: false})\n            })\n    }\n\n    async onChooseOrg(msg: string, org : string) {\n        // Fetch Endpoint data\n        this.setState({isLoading: true});\n        let orgInfo = await this.getOrganizationInfo(org);\n        this.setState({isLoading: false, currentItemType: 'domain', currentItem: orgInfo})\n    }\n\n    async onChooseDomain(msg: string, domain : string) {\n        // Fetch Endpoint data\n        this.setState({isLoading: true});\n        let domainInfo = await this.getDomainInfo(domain);\n        this.setState({isLoading: false, currentItemType: 'domain', currentItem: domainInfo})\n    }\n\n    async onChooseEndpoint(msg : string, ip : string) {\n        // Fetch Endpoint data\n        this.setState({isLoading: true});\n        let endpointInfo = await this.getEndpointInfo(ip);\n        this.setState({isLoading: false, currentItem: endpointInfo, currentItemType: 'endpoint'})\n    }\n\n    async getEndpointInfo(ip: string) {\n        let resp = await fetch('/getEndpointData?ip=' + ip);\n        let jsonResp = await resp.json();\n        console.log(jsonResp);\n        return jsonResp\n    }\n\n    async getDomainInfo(domain: string) {\n        let resp = await fetch('/getDomainData?domain=' + domain);\n        let jsonResp = await resp.json();\n        console.log(jsonResp);\n        return jsonResp\n    }\n\n    async getOrganizationInfo(orgname: string) {\n        let resp = await fetch('/getOrgData?org=' + orgname);\n        let jsonResp = await resp.json();\n        console.log(jsonResp);\n        return jsonResp\n    }\n\n    async onSearch(value: string) {\n        console.log(\"onSearch: \" + value);\n        this.setState({isLoading: true})\n        let domainInfo;\n\n        // Check if IP Address\n        let ipRegex = /^\\d+\\.\\d+\\.\\d+\\.\\d+/;\n        if (ipRegex.test(value)) {\n            this.onChooseEndpoint('', value);\n        } else if (value.indexOf(\".\") === -1) {\n            // domainInfo = await this.getOrganizationInfo(value);\n            this.onChooseOrg('', value);\n        } else {\n            // domainInfo = await this.getDomainInfo(value);\n            this.onChooseDomain('', value);\n        }\n    }\n\n  render() {\n        const {currentItem, currentItemType, isLoading} = this.state;\n        var currentView = null;\n\n        if (currentItemType === 'endpoint') {\n            currentView = <div>\n                <EndpointSummary endpoint={currentItem}/>\n            </div>\n        } else if (currentItemType === 'domain') {\n            currentView = <div>\n                <DomainSummary domainInfo={currentItem}/>\n            </div>\n        } else {\n            currentView = (\n                <Row justify={'center'} align={'middle'} style={{height: '100%', margin: '20rem'}}>\n                    <Col>\n                        <h1>\n                            {(isLoading ? \"Loading..\" : \"No data is loaded\")}\n                        </h1>\n                    </Col>\n                </Row>)\n        }\n\n        let searchOptions: any[] = [];\n        this.state.domainList.map((domain) => searchOptions.push({value: domain}));\n        this.state.orgList.map((orgname) => searchOptions.push({value: orgname}));\n        this.state.ipList.map((ip) => searchOptions.push({value: ip}));\n\n        return (\n            <div >\n                <Layout>\n                    <Header>\n                        <Row align={\"middle\"}>\n                            <Col span={4} style={{color: 'white'}}>\n                                <a href={\"/\"}>SecRecon</a>\n                            </Col>\n                            <Col span={20}>\n                                <AutoComplete\n                                    options={searchOptions}\n                                    style={{width: 600}}\n                                    onSelect={this.onSearch}\n                                    filterOption={true}\n                                >\n                                    <Input.Search size={\"large\"} placeholder={\"Search organization (e.g. Google) or IP address (e.g. 8.8.8.8)\"} enterButton/>\n                                </AutoComplete>\n                            </Col>\n                        </Row>\n                    </Header>\n                    <Content style={{backgroundColor: 'white', minHeight: '50rem'}}>\n                        {currentView}\n                    </Content>\n                </Layout>\n            </div>\n        );\n      }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      {/*<script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_KEY\"></script>*/}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}